{"version":3,"sources":["components/Layout/ThemeSwitcher.js","components/Layout/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Component","Topbar","React","lazy","Footer","CustomDot","icon","className","Layout","Loader","id","Fragment","fallback","this","props","children","ContainerClassName","style","height","width","TransitionClassName","withRouter","Software","routes","path","component","isWithoutLayout","exact","App","map","route","idx","WrappedComponent","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAK4BA,Y,gBCQtBC,EAASC,IAAMC,MAAK,kBAAM,+DAI1BC,EAASF,IAAMC,MAAK,kBAAM,iCAK1BE,EAAY,WACd,OACI,4BACI,cAAC,IAAD,CAAaC,KAAK,WAAWC,UAAU,aAK7CC,E,4MACFC,OAAS,WACL,OACI,qBAAKC,GAAG,YAAR,SACI,qBAAKA,GAAG,SAAR,SACI,sBAAKH,UAAU,UAAf,UACI,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,2B,uDAQ/B,OACI,cAAC,IAAMI,SAAP,UACI,eAAC,WAAD,CAAUC,SAAUC,KAAKJ,SAAzB,UACI,cAACR,EAAD,IACCY,KAAKC,MAAMC,SACZ,cAACX,EAAD,IAHJ,IAKI,cAAC,IAAD,CACIY,mBAAmB,oBACnBC,MAAO,CAACC,OAAQ,GAAIC,MAAO,IAC3BC,oBAAoB,qBAHxB,SAKI,cAAC,EAAD,e,GA3BHpB,aAuCNqB,cAAWb,GCnEpBc,G,kBAAWpB,IAAMC,MAAK,kBAAM,gEAiCnBoB,EAxBA,CAGb,CAAEC,KAAM,kBAAmBC,UAAWH,GACtC,CAAEE,KAAM,mBAAoBC,UAXZvB,IAAMC,MAAK,kBAAM,yDAajC,CAAEqB,KAAM,oBAAqBC,UAXRvB,IAAMC,MAAK,kBAAM,wDAqBtC,CAAEqB,KAAM,SAAUC,UAAWH,GAI7B,CAAEE,KAAM,IAAKC,UAAWH,GACxB,CAAEG,UAxBcvB,IAAMC,MAAK,kBAAM,kCAwBTuB,iBAAiB,EAAMC,OAAO,I,ICDlDC,E,4MACJnB,OAAS,WACP,OACE,qBAAKC,GAAG,YAAR,SACE,qBAAKA,GAAG,SAAR,SACE,sBAAKH,UAAU,UAAf,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,2B,uDAOvB,OACE,cAAC,IAAMI,SAAP,UACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAUC,KAAKJ,SAAzB,SACE,cAAC,IAAD,UACGc,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACVD,EAAMJ,gBACJ,cAAC,IAAD,CACEF,KAAMM,EAAMN,KACZG,MAAOG,EAAMH,MACbF,UAAWK,EAAML,WACZM,GAGP,cAAC,IAAD,CACEP,KAAMM,EAAMN,KACZG,OAAK,EACLF,WA5CAO,EA4CsBF,EAAML,UA1C9C,uKAEI,OACE,cAAC,EAAD,UACE,cAACO,EAAD,UAJR,GAAqB9B,IAAMF,aA2CJ+B,GA7CzB,IAAoBC,iB,GAaFhC,aA4CHqB,cAAWO,GC/DNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EACJ,cAAC,IAAD,UACE,cAAC,EAAD,MAIJC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDqHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.820c0011.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Import Switcher CSS\r\n\r\nclass ThemeSwitcher extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isSwitchToggle: false,\r\n    };\r\n    this.toggleSwitcher = this.toggleSwitcher.bind(this);\r\n  }\r\n\r\n  toggleSwitcher = () => {\r\n    this.setState({ isSwitchToggle: !this.state.isSwitchToggle });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          id=\"style-switcher\"\r\n          style={{ left: this.state.isSwitchToggle ? \"0px\" : \"-189px\" }}\r\n          className=\"bg-light border p-3 pt-2 pb-2\"\r\n        >\r\n          <h3 className=\"title text-center pt-3 mb-0\">Theme Option</h3>\r\n          <div className=\"text-center\">\r\n            <a\r\n              href=\"http://landrick.react.themesbrand.com\"\r\n              className=\"btn btn-sm w-100 btn-light mt-2\"\r\n            >\r\n              Light\r\n            </a>\r\n            <a\r\n              href=\"http://landrick.react-dark.themesbrand.com\"\r\n              className=\"btn btn-sm w-100 btn-primary mt-2\"\r\n            >\r\n              Dark\r\n            </a>\r\n            <a\r\n              href=\"http://landrick.react-rtl.themesbrand.com\"\r\n              className=\"btn btn-sm w-100 btn-light mt-2\"\r\n            >\r\n              RTL\r\n            </a>\r\n            <a\r\n              href=\"http://landrick.react-rtl-dark.themesbrand.com\"\r\n              className=\"btn btn-sm w-100 btn-primary mt-2\"\r\n            >\r\n              Dark-RTL\r\n            </a>\r\n          </div>\r\n          <div className=\"bottom\">\r\n            <Link\r\n              to=\"#\"\r\n              onClick={this.toggleSwitcher}\r\n              className=\"settings bg-white shadow d-block\"\r\n            >\r\n              <i className=\"mdi mdi-cog ml-1 mdi-24px position-absolute mdi-spin text-primary\"></i>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThemeSwitcher;\r\n","import React, {Component, Suspense} from \"react\";\nimport {withRouter} from \"react-router-dom\";\n\n// Scroll up button\nimport ScrollUpButton from \"react-scroll-up-button\";\n\n//Import Switcher\nimport ThemeSwitcher from \"./ThemeSwitcher\";\n\n//Import Icons\nimport FeatherIcon from \"feather-icons-react\";\n\n// Layout Components\nconst Topbar = React.lazy(() => import(\"./Topbar\"));\nconst NavbarPage = React.lazy(() =>\n    import(\"../../pages/Saas Onepage/NavbarPage\")\n);\nconst Footer = React.lazy(() => import(\"./Footer\"));\nconst FooterWithoutMenuLightSocialOnly = React.lazy(() =>\n    import(\"./FooterWithoutMenuLightSocialOnly\")\n);\n\nconst CustomDot = () => {\n    return (\n        <i>\n            <FeatherIcon icon=\"arrow-up\" className=\"icons\"/>\n        </i>\n    );\n};\n\nclass Layout extends Component {\n    Loader = () => {\n        return (\n            <div id=\"preloader\">\n                <div id=\"status\">\n                    <div className=\"spinner\">\n                        <div className=\"double-bounce1\"></div>\n                        <div className=\"double-bounce2\"></div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Suspense fallback={this.Loader()}>\n                    <Topbar/>\n                    {this.props.children}\n                    <Footer/>;\n\n                    <ScrollUpButton\n                        ContainerClassName=\"classForContainer\"\n                        style={{height: 36, width: 36}}\n                        TransitionClassName=\"classForTransition\"\n                    >\n                        <CustomDot/>\n                    </ScrollUpButton>\n                    {/* </div> */}\n\n                    {/* theme switcher */}\n                    {/*<ThemeSwitcher/>*/}\n                </Suspense>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(Layout);\n","import React from \"react\";\r\n\r\nconst Software = React.lazy(() => import(\"./pages/Software/index\"));\r\n\r\nconst Portfolio = React.lazy(() => import(\"./pages/Portfolio/index\"));\r\n\r\nconst PageAboutusTwo = React.lazy(() => import(\"./pages/Pages/PageAboutusTwo\"));\r\n\r\nconst PageError = React.lazy(() => import(\"./pages/Pages/Special/PageError\"))\r\n\r\n\r\nconst routes = [\r\n  //routes without Layout\r\n\r\n  { path: \"/index-software\", component: Software },\r\n  { path: \"/index-portfolio\", component: Portfolio },\r\n\r\n  { path: \"/page-aboutus-two\", component: PageAboutusTwo },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  { path: \"/index\", component: Software },\r\n\r\n\r\n\r\n  { path: \"/\", component: Software},\r\n  { component: PageError, isWithoutLayout: true, exact: false },\r\n];\r\n\r\nexport default routes;\r\n","import React, { Component, Suspense } from \"react\";\nimport Layout from \"./components/Layout/\";\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  withRouter,\n} from \"react-router-dom\";\n\n// Import Css\nimport \"./assets/css/materialdesignicons.min.css\";\nimport \"./Apps.scss\";\n\nimport \"./assets/css/colors/default.css\";\n\n// Include Routes\nimport routes from \"./routes\";\n\nfunction withLayout(WrappedComponent) {\n  // ...and returns another component...\n  return class extends React.Component {\n    render() {\n      return (\n        <Layout>\n          <WrappedComponent></WrappedComponent>\n        </Layout>\n      );\n    }\n  };\n}\n\nclass App extends Component {\n  Loader = () => {\n    return (\n      <div id=\"preloader\">\n        <div id=\"status\">\n          <div className=\"spinner\">\n            <div className=\"double-bounce1\"></div>\n            <div className=\"double-bounce2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n          <Suspense fallback={this.Loader()}>\n            <Switch>\n              {routes.map((route, idx) =>\n                route.isWithoutLayout ? (\n                  <Route\n                    path={route.path}\n                    exact={route.exact}\n                    component={route.component}\n                    key={idx}\n                  />\n                ) : (\n                  <Route\n                    path={route.path}\n                    exact\n                    component={withLayout(route.component)}\n                    key={idx}\n                  />\n                )\n              )}\n            </Switch>\n          </Suspense>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}